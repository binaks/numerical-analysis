# -*- coding: utf-8 -*-
"""t02q01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bG9-nQx9aZrKZEJ8Uz-2JqvpHYZkckIl
"""

from math import *

epsilon = 0.00001

def f(x):
  return x**3 - 1.7 * x**2 - 12.78 * x - 10.08

def g(x):
  return (x**3 - 1.7 * x**2 - 10.08)/12.78

def fprime(x):
  return 3 * x**2 - 3.4 * x - 12.78

def bisection(a, b, counter):
  counter = counter + 1

  c = (a + b)/2

  if f(c) > -epsilon and f(c) < epsilon:
    print ("Bisseção: raiz em ", c, "em ", counter, " iterações \n")
    return

  if f(a) * f(c) < 0:
    return bisection (a, c, counter)
  else:
    return bisection (c, b, counter)

def fixed_point_it(a, counter):
  counter = counter + 1

  if g(a) > a - epsilon and g(a) < a + epsilon:
    print ("Ponto Fixo: raiz em ", a, "em ", counter, " iterações \n")
    return

  return fixed_point_it(g(a), counter)

def newton(a, counter):
  counter = counter + 1

  if f(a) > -epsilon and f(a) < epsilon:
    print ("Newton: raiz em ", a, "em ", counter, " iterações \n")
    return

  a = a - f(a)/fprime(a)
  return newton(a, counter)

def secant(a, b, counter):
  counter = counter + 1

  if f(a) > -epsilon and f(a) < epsilon:
    print ("Secante: raiz em ", a, "em ", counter, " iterações \n")
    return

  b = a - (f(a) * (a - b))/(f(a) - f(b))
  return secant(b, a, counter)

def regula_falsi(a, b, counter):
  counter = counter + 1

  c = (a*f(b)-b*f(a))/(f(b) - f(a))

  if f(c) > -epsilon and f(c) < epsilon:
    print ("Regula Falsi: raiz em ", c, "em ", counter, " iterações \n")
    return

  if f(a) * f(c) > 0:
    return regula_falsi(c, b, counter)
  else:
    return regula_falsi(a, c, counter)

if __name__ == '__main__':
  bisection(-5.0, 6.0, 0)
  bisection(-5.0, 0.0, 0)
  bisection(-2.0, 0.0, 0)
  fixed_point_it(0.0, 0)
  newton(0.0, 0)
  newton(6.0, 0)
  newton(-5.0, 0)
  secant(-5.0, 6.0, 0)
  secant(-5.0, 0.0, 0)
  secant(-2.0, 0.0, 0)
  regula_falsi(-5.0, 6.0, 0)
  regula_falsi(-3.0, 0.0, 0)
  regula_falsi(-2.0, 0.0, 0)